#+TITLE: Python 3
#+AUTHOR: Andrea Crotti
#+EMAIL: andrea.crotti@iwoca.co.uk
#+OPTIONS: toc:nil num:nil ^:nil reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: fade
#+REVEAL_SPEED: fast
#+TOC: listings

* A bit of history

- Python 1.0 - January 1994
- Python 1.5 - December 31, 1997
- Python 2.0 - October 16, 2000
- *Python 2.7 - July 3, 2010*
- *Python 3.0 - December 3, 2008*
- Python 3.1 - June 27, 2009
- Python 3.2 - February 20, 2011
- Python 3.3 - September 29, 2012
- Python 3.4 - March 16, 2014
- *Python 3.5 - September 13, 2015*

#+BEGIN_NOTES

As you can see from this timeline Python is a very old language.
It has been around for 22 years already now and the version we are using was released in 2010.

The first version of Python 3 was released in 2008, so 7 years ago now.

#+END_NOTES

* Few facts

- Ubuntu 16.04 LTS *only* ships Python 3.
- Python 2.8 will *never* be released
- Python 2.7 is in maintanance mode (no new features)
- Python 2 EOL 2020

#+begin_quote

“Python 2 is the next COBOL.”

-Alex Gaynor, at PyCon AU 2013
#+end_quote

* Main differences

- strings!
- consistency
- safety


#+BEGIN_QUOTE
It all started with a pair of quotes

-Anonymous
#+END_QUOTE

* Unicode vs strings

** Strings

- computer store as bytes
- many languages out there
- ASCII is not enough
- ISO 8859-1/Windows-1252/ and many more -> *CHAOS*

** Unicode

- Assigns characters to code points (integers)
- 1.1 million code points
- 110K assigned

☃ 💩

** UTF-8

- variable length encoding
- compatible with ASCII

** Types

Python2:

- str: a sequence of bytes
- unicode: a sequence of code points

Python3:

- bytes: a sequence of bytes
- str: always unicode

** Implicit conversions

Python 2:

#+BEGIN_SRC python
  In [5]: type('hello')
  Out[5]: str

  In [6]: type(u'hello')
  Out[6]: unicode

  In [7]: 'hello' == u'hello'
  Out[7]: True

#+END_SRC

Python 3:

#+BEGIN_SRC python
  In [19]: type(u'hello')
  Out[19]: str

  In [20]: type('hello')
  Out[20]: str

  In [21]: u'hello' == 'hello'
  Out[21]: True

#+END_SRC


* Other changes

** Advanced unpacking
Python2:

#+BEGIN_SRC python
>>> a, b = range(2)
>>> a
0
>>> b
1
#+END_SRC

Python 3
#+BEGIN_SRC python
>>> a, b, *rest = range(10)
>>> a
0
>>> b
1
>>> rest
[2, 3, 4, 5, 6, 7, 8, 9]

#+END_SRC

** Keyword only arguments

Defined as:

#+BEGIN_SRC python
def f(a, b, *args, option=True):
#+END_SRC

The only way to access it is to explicitly call f(a, b, option=True)

You can write just a * if you don't want to collect *args.

#+BEGIN_SRC python
def sum(a, b, *, biteme=False):
  if biteme:
      shutil.rmtree('/')
  else:
      return a + b

>>> sum(1, 2, 3)
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: sum() takes 2 positional arguments but 3 were given

#+END_SRC

** Chained exceptions (1)

#+begin_src python

def mycopy(source, dest):
 try:
     shutil.copy2(source, dest)
 except OSError: # We don't have permissions. More on this later
     raise NotImplementedError("automatic sudo injection")

#+end_src

#+begin_src python
  >>> mycopy('noway', 'noway2')
  >>> mycopy(1, 2)
  Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in mycopy
  NotImplementedError: automatic sudo injection
#+end_src

** Chained exceptions (2)

Python3

#+BEGIN_SRC python
  ...
  File "/Users/aaronmeurer/anaconda3/lib/python3.3/shutil.py", line 109, in copyfile
    with open(src, 'rb') as fsrc:
  PermissionError: [Errno 13] Permission denied: 'noway'

  During handling of the above exception, another exception occurred:

  Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in mycopy
  NotImplementedError: automatic sudo injection
#+END_SRC

Or even

#+BEGIN_SRC python
  raise exception from e
  >>> raise NotImplementedError from OSError
  OSError

  The above exception was the direct cause of the following exception:

  Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  NotImplementedError
#+END_SRC

** Fine grained exceptions (1)

Python2:

#+begin_src python
  import errno
  def mycopy(source, dest):
    try:
        shutil.copy2(source, dest)
    except OSError as e:
        if e.errno in [errno.EPERM, errno.EACCES]:
            raise NotImplementedError("automatic sudo injection")
        else:
            raise
#+end_src

Python3:

#+BEGIN_SRC python
  def mycopy(source, dest):
   try:
       shutil.copy2(source, dest)
   except PermissionError:
       raise NotImplementedError("automatic sudo injection")

#+END_SRC

** Iterators all over

- range
- zip
- map
- dict.values

are all iterators.

#+BEGIN_SRC python
In [2]: d = {1: 2, 3: 4}

In [3]: d.items()
Out[3]: dict_items([(1, 2), (3, 4)])

In [4]: list(d.items())
Out[4]: [(1, 2), (3, 4)]

In [5]: d.keys()
Out[5]: dict_keys([1, 3])

#+END_SRC

** No more ninja comparison

Python 2:

#+BEGIN_SRC python
>>> 'abc' > 123
True
>>> None > all
False
#+END_SRC

In Python 3 this does not work anymore:

#+BEGIN_SRC python
>>> 'one' > 2
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: unorderable types: str() > int()
#+END_SRC

** Yield from (1)

Python2

#+begin_src python
for i in gen():
    yield i
#+end_src

Python3

#+begin_src python
yield from gen()
#+end_src

# this allows to do some really nice things as for example generate
# sub generators from generators passing them around accordingly

** Yield from (2)

#+BEGIN_SRC python
  def get_list_values(lst):
    for item in lst:
      yield int(item)
    for item in lst:
      yield str(item)
    for item in lst:
      yield float(item)
#+END_SRC

#+BEGIN_SRC python
  def get_list_values(lst):
    for sub in [get_list_values_as_int, 
                get_list_values_as_str, 
                get_list_values_as_float]:
      yield from sub(lst)
#+END_SRC

** Function annotations

#+begin_src python
In [1]: def f(a: int, b: int) -> int:
   ...:     return a + b
   ...:

In [2]: f(1, 20)
Out[2]: 21

In [3]: f.__annotations__
Out[3]: {'a': int, 'b': int, 'return': int}
#+end_src

** Asyncio

#+begin_src python

  import asyncio

  @asyncio.coroutine
  def my_coroutine(future, task_name, seconds_to_sleep=3):
      print('{0} sleeping for: {1} seconds'.format(task_name, seconds_to_sleep))
      yield from asyncio.sleep(seconds_to_sleep)
      future.set_result('{0} is finished'.format(task_name))


  def got_result(future):
      print(future.result())

  loop = asyncio.get_event_loop()
  future1 = asyncio.Future()
  future2 = asyncio.Future()

  tasks = [
      my_coroutine(future1, 'task1', 3),
      my_coroutine(future2, 'task2', 1)]

  future1.add_done_callback(got_result)
  future2.add_done_callback(got_result)

  loop.run_until_complete(asyncio.wait(tasks))
  loop.close()

#+end_src

** Standard library additions

- ipaddress
- functools.lru_cache
- enum
- asyncio
- pathlib
- mock (in unittest.mock)
- ...

* Migrating

** 2to3
- one off syntactic conversion
- always safe
- does not solve all the problems

** six
- Python2 and Python3 compatible code
- Django for example uses /six/

** future

Similar to six but more modern

** Migration example

*** 2to3

#+BEGIN_SRC python
  from StringIO import StringIO

  if __name__ == '__main__':
      s = StringIO("Hello")
      print s.read()

#+END_SRC

*2to3 original.py*

#+BEGIN_SRC python
  from io import StringIO

  if __name__ == '__main__':
      s = StringIO("Hello")
      print(s.read())

#+END_SRC

*** Using six

#+BEGIN_SRC python
import six


if __name__ == '__main__':
    s = six.StringIO("Hello")
    print(s.read())
#+END_SRC

#+BEGIN_SRC sh
$ python2 using_six.py 
Hello
$ python3 using_six.py
Hello

#+END_SRC

*** Using futurize

*futurize original.py*

#+BEGIN_SRC python
  from __future__ import print_function
  from future import standard_library
  standard_library.install_aliases()
  from io import StringIO

  if __name__ == '__main__':

      s = StringIO("Hello")
      print(s.read())

#+END_SRC

*** Running tests

* Conclusions

[[./images/elephant.jpg]]

- we can't ignore Python3
- start experimenting
- new projects Python2/3 or Python3 only

** Possible plan

- existing projects
  + deprecate and anyway not adopt new libraries that are not Python3 compatible
  + avoid any non Python3 compatible library
  + turn on Python3 warnings
  + make tests run for Python3

- new projects
  + if possible Python3 only
  + otherwise use *future* or *six*

* Links

- [[https://pypi.python.org/pypi/future][future library]]
- [[https://pypi.python.org/pypi/six][six library]]
- [[https://github.com/python/cpython/blob/master/Objects/unicodeobject.c][Python3 unicode code]]
- [[http://nedbatchelder.com/text/unipain/unipain.html#1][pragmatic unicode, how do I stop the pain?]]
- [[https://asmeurer.github.io/python3-presentation/slides.htm][10 awesome python3 features]]
- [[http://www.snarky.ca/why-python-3-exists][why python3 exists]]
- [[http://www.diveintopython3.net/porting-code-to-python-3-with-2to3.html][porting to python3 with 2to3]]
- [[https://pypi.python.org/pypi/tox][tox]]
